package com.efg.games.tunnelpanic{		import com.efg.framework.FrameCounter;	import com.efg.framework.FrameRateProfiler;	import com.efg.framework.GameFrameWorkAdvancedTimer;	import flash.display.Bitmap;	import flash.text.TextFormat;	import flash.text.TextField; 	import flash.text.TextFormatAlign;	import flash.text.TextFieldAutoSize;	import flash.geom.Point;	import flash.events.Event;		import com.efg.framework.FrameWorkStates;	import com.efg.framework.GameFrameWork;	import com.efg.framework.BasicScreen;	import com.efg.framework.ScoreBoard;	import com.efg.framework.SideBySideScoreElement;	import com.efg.framework.SoundManager;	import com.efg.framework.SponsorScreen;	import com.efg.framework.LogoScreen;	import mochi.as3.*;		//**Mind Jolt Stuff ***	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.net.URLRequest;	import flash.events.Event;	import flash.system.*;		dynamic public class Main_Mindjolt extends GameFrameWork {						[Embed(source='../../../../../../../../classes/com/efg/framework/fonts/ARCADE.TTF', fontFamily = 'arcade', fontName = 'arcade',mimeType="application/x-font-truetype")]        public static const FontArcade:Class;				//custom sccore board elements		public static const SCORE_BOARD_SCORE:String = "score";						public static var SOUND_TITLE_MUSIC:String = "titlemusic";		public static var SOUND_IN_GAME_MUSIC:String = "ingamemusic";		public static var SOUND_EXPLODE:String = "explode";				public var _mochiads_game_id:String = "715a5bc33b9b79e8";				//*** Mind Jolt Stuff		public var MindJoltAPI:Object				[Embed(source = '../../../../../../../../classes/com/efg/framework/logoscreens/mindjoltlogo.png')]		public var  MindJoltLogoPNG:Class;				public function Main_Mindjolt() {			//added in chapter 11			if (stage) addedToStage();			else addEventListener(Event.ADDED_TO_STAGE, addedToStage,false,0,true);		}				override public function addedToStage(e:Event = null):void {			if (e != null) {				removeEventListener(Event.ADDED_TO_STAGE, addedToStage);			}			super.addedToStage();			trace("in drive she said added to stage");			init();		}			//*** Mind Jolt stuff		public function postMindJoltAPIConnect (success:Boolean):void {  			trace("[MindJoltAPI] service successfully loaded"); 		}						// init() is used to set up all of the things that we should only need to do one time		override public function init():void {			trace("init");			game= new TunnelPanic();			setApplicationBackGround(600, 400, false, 0x000000);						//add score board to the screen as the seconf layer			scoreBoard = new ScoreBoard();						scoreBoardTextFormat = new TextFormat("arcade", "30", "0xf300f3", "true");									scoreBoard.createTextElement(SCORE_BOARD_SCORE, new SideBySideScoreElement(50, 2, 20, "Score", scoreBoardTextFormat, 75, "0", scoreBoardTextFormat, true));			scoreBoard.showMuteIndicator();			scoreBoard.showPausedIndicator();						muteIndicatorTextFormatNormal = new TextFormat("arcade", "25", "0xffffff", "true");			muteIndicatorTextFormatOn = new TextFormat("arcade", "25", "0xff0000", "true");			pausedIndicatorTextFormatNormal = new TextFormat("arcade", "25", "0xffffff", "true");			pausedIndicatorTextFormatOn = new TextFormat("arcade", "25", "0xff0000", "true");						scoreBoard.setMuteIndicator("[M] to Mute", new Point(250, 5), muteIndicatorTextFormatNormal, 150,true);			scoreBoard.setPausedIndicator("[P] to Pause", new Point (450, 5), muteIndicatorTextFormatNormal,150, true);						//screen text initializations			screenTextFormat = new TextFormat("arcade", "30", "0xffffff", "false");			screenTextFormat.align = flash.text.TextFormatAlign.CENTER;			screenButtonFormat = new TextFormat("arcade", "30", "0x000000", "false");									titleScreen = new BasicScreen(FrameWorkStates.STATE_SYSTEM_TITLE, 600, 400, false, 0x000000 );			titleScreen.displayText.embedFonts = true;			titleScreen.displayText.autoSize = TextFieldAutoSize.LEFT;			titleScreen.addImage(new Library.CartPNG().bitmapData);			titleScreen.imageBitmap.smoothing = true;			titleScreen.imageBitmap.scaleX = .8;			titleScreen.imageBitmap.scaleY = .8;			titleScreen.imageBitmap.x = 130;			//titleScreen.createOkButton("Play", new Point(240, 330), 100, 25, screenButtonFormat, 0x000000, 0xff0000, 2);			titleScreen.createImageButton(new Library.OkButtonBlackText().bitmapData, new Library.OkButtonRedText().bitmapData, new Point(265, 330));			//titleScreen.okButton.tempText.embedFonts = true;			titleScreen.createDisplayText("Click OK To Continue", 200, new Point(160, 365), screenTextFormat);			var mindJoltLogo:Bitmap = new MindJoltLogoPNG();			mindJoltLogo.scaleX = .6;			mindJoltLogo.scaleY = .6;			mindJoltLogo.x = 10;			mindJoltLogo.y = 300;			titleScreen.addChild(mindJoltLogo);						instructionsScreen = new BasicScreen(FrameWorkStates.STATE_SYSTEM_INSTRUCTIONS, 600, 400, false, 0x000000);			instructionsScreen.displayText.embedFonts = true;			instructionsScreen.displayText.autoSize = TextFieldAutoSize.LEFT;			instructionsScreen.addImage(new Library.IntsructionsPNG().bitmapData);			instructionsScreen.imageBitmap.x = 50;			instructionsScreen.imageBitmap.y = 10;			instructionsScreen.createImageButton(new Library.OkButtonBlackText().bitmapData, new Library.OkButtonRedText().bitmapData, new Point(265, 330));			//instructionsScreen.createOkButton("Start", new Point(240, 330), 100, 25, screenButtonFormat, 0x000000, 0xff0000, 2);			//instructionsScreen.okButton.tempText.embedFonts = true;			instructionsScreen.createDisplayText("Click OK To Play", 150, new Point(175, 365), screenTextFormat);						gameOverScreen = new BasicScreen(FrameWorkStates.STATE_SYSTEM_GAME_OVER, 600, 400, false, 0x000000);			gameOverScreen.displayText.embedFonts = true;			gameOverScreen.displayText.autoSize = TextFieldAutoSize.LEFT;			gameOverScreen.createImageButton(new Library.OkButtonBlackText().bitmapData, new Library.OkButtonRedText().bitmapData, new Point(265, 200));			//gameOverScreen.createOkButton("Submit", new Point(210, 250), 150, 25,screenButtonFormat, 0x000000, 0xff0000,2);			gameOverScreen.createDisplayText("Game Over\nSubmit Score.",100,new Point(200,150),screenTextFormat);						levelInScreen = new BasicScreen(FrameWorkStates.STATE_SYSTEM_LEVEL_IN, 600, 400, true, 0xbbff0000);			levelInScreen.displayText.embedFonts = true;			levelInScreen.displayText.autoSize = TextFieldAutoSize.LEFT;			levelInText = "GO!";			levelInScreen.createDisplayText(levelInText,100,new Point(280,150),screenTextFormat);						pausedScreen = new BasicScreen(FrameWorkStates.STATE_SYSTEM_PAUSE, 300, 300, true, 0x77999999 );			pausedScreen.x = 150;			pausedScreen.y = 50;			pausedScreen.displayText.embedFonts = true;			pausedScreen.displayText.autoSize = TextFieldAutoSize.LEFT;			pausedScreen.createDisplayText("Paused\nClick to resume\ngame.", 100, new Point(50, 100), screenTextFormat);			pausedScreen.createImageButton(new Library.OkButtonBlackText().bitmapData, new Library.OkButtonRedText().bitmapData, new Point(125, 190));			//pausedScreen.createOkButton("resume", new Point(75, 190), 150, 30, screenButtonFormat, 0x000000, 0xff0000,2);						logoScreen = new LogoScreen(new Library.LogoAnimation(),"http://www.8bitrocket.com/");			sponsorScreen = new SponsorScreen(new Library.SponsorScreenPNG().bitmapData, "http://www.8bitrocket.com/book");						logoScreen.x = 100;			sponsorScreen.x = 100;						//set initial game state			switchSystemState(FrameWorkStates.STATE_SYSTEM_MOCHI_AD);									//sounds			//*** Flex SDK						soundManager.addSound(SOUND_IN_GAME_MUSIC, new Library.SoundMusicInGame);			soundManager.addSound(SOUND_TITLE_MUSIC,new Library.SoundMusicTitle);			soundManager.addSound(SOUND_EXPLODE,new Library.SoundExplode);												//flash IDE			//soundManager.addSound(SOUND_IN_GAME_MUSIC, new SoundMusicInGame);			//soundManager.addSound(SOUND_TITLE_MUSIC,new SoundMusicTitle);			//soundManager.addSound(SOUND_EXPLODE,new SoundExplode);								//mochi			mochiGameId = "715a5bc33b9b79e8";			mochiBoardId = "c7c167d3db18150e";			MochiServices.connect(mochiGameId, this);						//framerate profiler						frameRate = 40;						//frameRateProfiler = new FrameRateProfiler();			//frameRateProfiler.profilerRenderObjects = 4000;			//frameRateProfiler.profilerRenderLoops = 7;			//frameRateProfiler.profilerDisplayOnScreen= true;			//frameRateProfiler.profilerXLocation = 0;			//frameRateProfiler.profilerYLocation = 0;			//addChild(frameRateProfiler);			//frameRateProfiler.startProfile(frameRate);						//frameRateProfiler.addEventListener(FrameRateProfiler.EVENT_COMPLETE, frameRateProfileComplete, false, 0, true);						frameCounter.x = 400;			frameCounter.y = 0;			//addChild(frameCounter);						startTimer(true);							//*** mind jolt stuff			if (MindJoltAPI == null) {			  // get the parameters passed into the game			  Security.allowDomain("static.mindjolt.com");			  // get the parameters passed into the game			  var gameParams:Object = LoaderInfo(root.loaderInfo).parameters;			  // now load the API			  var urlLoader:Loader = new Loader();			  urlLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadFinished);			  urlLoader.load(new URLRequest(gameParams.mjPath || "http://static.mindjolt.com/api/as3/api_as3_local.swf"));			  this.addChild(urlLoader);			  function loadFinished (e:Event):void {				MindJoltAPI=e.currentTarget.content;				if (MindJoltAPI != null) {				  MindJoltAPI.service.connect(postMindJoltAPIConnect);				  trace ("[MindJoltAPI] service successfully loaded");				} else {				  trace("[MindJoltAPI] failed to load");				}			  }			}					}						override public function muteKeyPressedHandler():void {			if (soundManager.soundMute) {				scoreBoard.setMuteIndicator("[M] to Mute", new Point(250, 5), muteIndicatorTextFormatNormal, 150, true);			}else {				scoreBoard.setMuteIndicator("[M] to unMute", new Point (250, 5), muteIndicatorTextFormatOn, 150, true);			}						super.muteKeyPressedHandler();		}				/*		override public function frameRateProfileComplete(e:Event):void {			//advanced timer			trace("profiledFrameRate=" + frameRateProfiler.profilerFrameRateAverage);						game.setRendering(frameRateProfiler.profilerFrameRateAverage, frameRate);			game.timeBasedUpdateModifier = frameRate;						removeEventListener(FrameRateProfiler.EVENT_COMPLETE, frameRateProfileComplete) ;			removeChild(frameRateProfiler);						//frame counter			frameCounter.x = 400;			frameCounter.y = 0;			frameCounter.profiledRate = frameRateProfiler.profilerFrameRateAverage;			frameCounter.showProfiledRate = true;			addChild(frameCounter);			startTimer(true);			}		*/				override public function systemGameOver():void {			removeChild(scoreBoard);			super.systemGameOver();			lastScore = game.lastScore;			nextSystemState = FrameWorkStates.STATE_SYSTEM_TITLE; 						//mind jolt			 MindJoltAPI.service.submitScore(lastScore);		}								override public function systemGamePlay():void {			game.runGameTimeBased(paused,timeDifference);								}				override public function systemTitle():void {			soundManager.playSound(SOUND_TITLE_MUSIC, true,999, 30, 1);			super.systemTitle();		}				override public function systemNewGame():void {			addChild(scoreBoard);			trace("new game");			soundManager.stopSound(SOUND_TITLE_MUSIC,true);			super.systemNewGame();		}				override public function systemLevelIn():void {			levelInScreen.alpha = 1;			super.systemLevelIn();		}				override public function systemWait():void {			//trace("system Level In");			if (lastSystemState == FrameWorkStates.STATE_SYSTEM_LEVEL_IN) {				levelInScreen.alpha -= .01;				if (levelInScreen.alpha < 0 ) {					dispatchEvent(new Event(EVENT_WAIT_COMPLETE));					levelInScreen.alpha = 0;				}			}else if (lastSystemState == FrameWorkStates.STATE_SYSTEM_SPONSOR_SCREEN) {				waitCount++;				trace("waitCount= " + waitCount);				if (waitCount > waitTime) {					waitCount = 0;					dispatchEvent(new Event(EVENT_WAIT_COMPLETE));				}			}else if (lastSystemState == FrameWorkStates.STATE_SYSTEM_LOGO_SCREEN) {				trace("logoScreen.clip.currentFrame=" + logoScreen.clip.currentFrame);				trace("logoScreen.clip.totalFrames=" + logoScreen.clip.totalFrames);				if (logoScreen.clip.currentFrame == logoScreen.clip.totalFrames) {					dispatchEvent(new Event(EVENT_WAIT_COMPLETE));				 }			}		}					}}							