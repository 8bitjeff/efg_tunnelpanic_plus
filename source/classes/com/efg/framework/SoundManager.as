package com.efg.framework{	// Import necessary classes from the flash libraries		import flash.display.Loader;	import flash.display.Sprite;	import flash.events.*;	import flash.media.*;	import flash.media.SoundMixer;	import flash.net.URLRequest;	/**	 * ...	 * @author Steve Fulton and Jeff Fulton	 * Simplfied SoundManager	 */	public class SoundManager extends Sprite	{			public static const EVENT_SOUNDS_LOAD_COMPLETE:String = "sound_load_complete";		public static const EVENT_SOUNDS_CHAIN_PLAY_COMPLETE:String = "sound_chain_play_complete";		public static const EVENT_A_SOUND_CHAIN_SOUND_DONE:String = "sound_chain_sound_done";						private var sounds:Array=[];				private var soundTrackChannel:SoundChannel=new SoundChannel();		private var soundChannels:Array = []; 		public var soundMute:Boolean = false; // added chapter 11		private var tempSoundTransform:SoundTransform = new SoundTransform(); // changed chapter 11		private var muteSoundTransform:SoundTransform = new SoundTransform(); 		private var turnDownTransform:SoundTransform = new SoundTransform(); 		private var tempSound:Sound; //changed chapter 11				//load sounds		private var soundNumToLoad:int = 0;		private var soundToLoadIndex:int = 0;		private var soundLoadData:Array = [];		private var loadedSounds:Array = [];				//sound chain		private var soundChainPlayData:Array = [];		private var soundChainNumToPlay:int = 0;		private var soundChainPlayIndex:int = 0;		private var soundChainPlayingName:String;		private var chainVolume:Number=1;				//single event sound		private var singleEventSoundChannel:SoundChannel = new SoundChannel();						public function SoundManager() 	{								}				public function loadSounds(soundLoadData:Array):void {			soundToLoadIndex = 0;			this.soundLoadData = soundLoadData;			//trace("loading sounds");			soundNumToLoad = soundLoadData.length;						loadASound();		}						private function loadASound():void {						if (soundNumToLoad == soundToLoadIndex) {				allSoundLoaded();			}else {								var newSound:Sound = new Sound();				loadedSounds[soundToLoadIndex] = newSound;							var url:String = soundLoadData[soundToLoadIndex].url;				//trace("clip to load: " + url);				var urlRequest:URLRequest = new URLRequest(url);				loadedSounds[soundToLoadIndex].addEventListener(Event.COMPLETE, soundLoadCompleteListener);								loadedSounds[soundToLoadIndex].load(urlRequest);							}					}							private function soundLoadCompleteListener(e:Event):void {			loadedSounds[soundToLoadIndex].removeEventListener(Event.COMPLETE, soundLoadCompleteListener);			//trace("sound loaded " + soundLoadData[soundToLoadIndex].name);			//trace("loadedSounds[soundToLoadIndex]=" +loadedSounds[soundToLoadIndex].toString());			addSound(soundLoadData[soundToLoadIndex].name, loadedSounds[soundToLoadIndex]);			soundToLoadIndex++;			loadASound();		}												private function allSoundLoaded():void {			dispatchEvent(new Event(EVENT_SOUNDS_LOAD_COMPLETE));		}						public function playSound(soundName:String, isSoundTrack:Boolean=false, loops:int=1, offset:Number=0, volume:Number=1):void{			////trace("sound=" + snd);			//var tsound:Object;			try{				tempSoundTransform.volume=volume;				tempSound = sounds[soundName];								if (isSoundTrack) {					if (soundTrackChannel != null) {						soundTrackChannel.stop();					}					soundTrackChannel = tempSound.play(offset,loops);													soundTrackChannel.soundTransform=tempSoundTransform;						//trace("playing sound " + soundName);				}else {					//trace("playing sound " + soundName);					soundChannels[soundName] = tempSound.play(offset, loops);				////trace("sndTransform=" + sndTransform);					soundChannels[soundName].soundTransform=tempSoundTransform;						}			}			catch(e:Error){				//trace("**** caught sound refernece error");			}							}				public function playSoundMonitored(soundName:String, isSoundTrack:Boolean=false, loops:int=1, offset:Number=0, volume:Number=1):SoundChannel{			////trace("sound=" + snd);			//var tsound:Object;						tempSoundTransform.volume=volume;			tempSound = sounds[soundName];			trace(tempSound);			if (isSoundTrack) {				if (soundTrackChannel != null) {					soundTrackChannel.stop();				}				soundTrackChannel = tempSound.play(offset,loops);												soundTrackChannel.soundTransform = tempSoundTransform;				return (soundTrackChannel);			}else {				////trace("playing sound " + soundName);				soundChannels[soundName] = tempSound.play(offset, loops);			////trace("sndTransform=" + sndTransform);				soundChannels[soundName].soundTransform = tempSoundTransform;					return (soundChannels[soundName]);			}													}				public function playSoundChain(sounds:Array, volume:Number=1):void {			chainVolume=volume;			soundChainPlayIndex = 0;			soundChainPlayData = sounds;			soundChainNumToPlay = soundChainPlayData.length;			playAChainSound();		}				private function playAChainSound():void {					if (soundChainNumToPlay == soundChainPlayIndex) {				allChainSoundsPlayed();			}else {				try{					soundChainPlayingName = soundChainPlayData[soundChainPlayIndex];					tempSound = sounds[soundChainPlayingName];					//trace("soundChainPlayingName=" + soundChainPlayingName);	 				soundChannels[soundChainPlayingName] = tempSound.play();					tempSoundTransform.volume=chainVolume;					soundChannels[soundChainPlayingName].soundTransform = tempSoundTransform;					soundChannels[soundChainPlayingName].addEventListener(Event.SOUND_COMPLETE, chainSoundPlayCompleteListener);				}				catch(e:Error){					//trace("**** caught chain sound reference error");				}			}		}				private function chainSoundPlayCompleteListener(e:Event):void {			try{				soundChannels[soundChainPlayingName].removeEventListener(Event.SOUND_COMPLETE, chainSoundPlayCompleteListener);				dispatchEvent(new Event(EVENT_A_SOUND_CHAIN_SOUND_DONE));				soundChainPlayIndex++;				playAChainSound();			}			catch(e:Error){				//trace("caught sound chain error");			}		}				private function allChainSoundsPlayed():void {			dispatchEvent(new Event(EVENT_SOUNDS_CHAIN_PLAY_COMPLETE))		}				public function playRandomSound(soundNameList:Array,isSoundTrack:Boolean=false, loops:int=1, offset:Number=0, volume:Number=1):void {			var randId:int = Math.floor(Math.random() * soundNameList.length);			playSound(soundNameList[randId],isSoundTrack,loops,offset,volume);		}										//*** funtion add chapter 12 for package structure		public function addSound(soundName:String, sound:Sound):void {			//trace("adding sound " + sound.toString());			sounds[soundName] = sound;					}						public function stopSound(soundName:String, isSoundTrack:Boolean = false):void {						//trace("stop sound");			if (isSoundTrack) {				//trace("isSoundTrack");				soundTrackChannel.stop();			}else {				//trace("stopping sound");				soundChannels[soundName].stop();							}								}			public function playRandomSingleEventSound(soundNameList:Array):void {			var randId:int = Math.floor(Math.random() * soundNameList.length);			playSingleEventSound(sounds[soundNameList[randId]]);						trace("Sound");		}				public function playSingleEventSound(soundToPlay:Sound):void {			singleEventSoundChannel.stop();			singleEventSoundChannel = soundToPlay.play();		}				public function playSingleEventSoundByName(soundToPlay:String):void {			singleEventSoundChannel.stop();			singleEventSoundChannel = sounds[soundToPlay].play();		}						public function stopAllSounds():void {			SoundMixer.stopAll();		}				public function setMainMixer(volume:Number):void {			turnDownTransform.volume=volume;			SoundMixer.soundTransform=turnDownTransform;		}				public function resetTurnSoundDown():void {			turnDownTransform.volume=1;		}				public function turnSoundDown(inc:Number):Boolean{			SoundMixer.soundTransform=turnDownTransform;			turnDownTransform.volume-=inc;			if (turnDownTransform.volume <0) {				turnDownTransform.volume =0;				return true;			}else{				return false;			}		}															//*** added chapter 11		public function muteSound():void {			////trace("sound manager got mute event");			if (soundMute) {				soundMute=false;				muteSoundTransform.volume=1;				SoundMixer.soundTransform=muteSoundTransform;				//if (startMusicPlaying) playSound("startMusic", 2000, 1);			}else{				//flash.media.SoundMixer.stopAll();				muteSoundTransform.volume=0;				SoundMixer.soundTransform=muteSoundTransform;				soundMute=true;			}		}				public function dispose():void {			for each (var tempSound:Sound in sounds) {				tempSound=null;			}		}		//*** end added chapter 11	}	}